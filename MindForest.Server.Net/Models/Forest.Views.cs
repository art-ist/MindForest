//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MindForest.Models.ForestEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0a43c5aa11ebdb1300fee66061bb48c998978497ac216b9f57c732aa97c42385))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets0a43c5aa11ebdb1300fee66061bb48c998978497ac216b9f57c732aa97c42385 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0a43c5aa11ebdb1300fee66061bb48c998978497ac216b9f57c732aa97c42385"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "MindForestModelStoreContainer.Nodes")
            {
                return GetView0();
            }

            if (extentName == "MindForestModelStoreContainer.Connections")
            {
                return GetView1();
            }

            if (extentName == "MindForestModelStoreContainer.Permissions")
            {
                return GetView2();
            }

            if (extentName == "MindForestModelStoreContainer.NodeTexts")
            {
                return GetView3();
            }

            if (extentName == "MindForestModelStoreContainer.ConnectionTexts")
            {
                return GetView4();
            }

            if (extentName == "MindForestModelStoreContainer.UserClaims")
            {
                return GetView5();
            }

            if (extentName == "MindForestModelStoreContainer.UserExternalLogins")
            {
                return GetView6();
            }

            if (extentName == "MindForestModelStoreContainer.UserRoles")
            {
                return GetView7();
            }

            if (extentName == "MindForestModelStoreContainer.Users")
            {
                return GetView8();
            }

            if (extentName == "MindForestModelStoreContainer.Roles")
            {
                return GetView9();
            }

            if (extentName == "ForestEntities.Nodes")
            {
                return GetView10();
            }

            if (extentName == "ForestEntities.Connections")
            {
                return GetView11();
            }

            if (extentName == "ForestEntities.Permissions")
            {
                return GetView12();
            }

            if (extentName == "ForestEntities.NodeTexts")
            {
                return GetView13();
            }

            if (extentName == "ForestEntities.ConnectionTexts")
            {
                return GetView14();
            }

            if (extentName == "ForestEntities.UserClaims")
            {
                return GetView15();
            }

            if (extentName == "ForestEntities.UserExternalLogins")
            {
                return GetView16();
            }

            if (extentName == "ForestEntities.UserRoles")
            {
                return GetView17();
            }

            if (extentName == "ForestEntities.Users")
            {
                return GetView18();
            }

            if (extentName == "ForestEntities.Roles")
            {
                return GetView19();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.Nodes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Nodes
        [MindForestModel.Store.Nodes](T1.Nodes_Id, T1.Nodes_Lang, T1.Nodes_UserId, T1.Nodes_NodeType, T1.Nodes_IsTreeRoot, T1.Nodes_TreeSettings, T1.Nodes_Icon, T1.Nodes_CssClass, T1.Nodes_Style, T1.Nodes_Color, T1.Nodes_BackColor, T1.Nodes_CloudColor, T1.Nodes_FontName, T1.Nodes_FontSize, T1.Nodes_FontWeight, T1.Nodes_FontStyle, T1.Nodes_ReminderAt, T1.Nodes_Progress, T1.Nodes_Link, T1.Nodes_LinkTestedAt, T1.Nodes_LinkStatus, T1.Nodes_MediaStreamId, T1.Nodes_MediaType, T1.Nodes_MediaOffest, T1.Nodes_MediaLength, T1.Nodes_MediaCycle, T1.Nodes_Hook, T1.Nodes_RestrictAccess, T1.Nodes_ForeignId, T1.Nodes_ForeignOrigin, T1.Nodes_CreatedAt, T1.Nodes_CreatedBy, T1.Nodes_ModifiedAt, T1.Nodes_ModifiedBy)
    FROM (
        SELECT 
            T.Id AS Nodes_Id, 
            T.Lang AS Nodes_Lang, 
            T.UserId AS Nodes_UserId, 
            T.NodeType AS Nodes_NodeType, 
            T.IsTreeRoot AS Nodes_IsTreeRoot, 
            T.TreeSettings AS Nodes_TreeSettings, 
            T.Icon AS Nodes_Icon, 
            T.CssClass AS Nodes_CssClass, 
            T.Style AS Nodes_Style, 
            T.Color AS Nodes_Color, 
            T.BackColor AS Nodes_BackColor, 
            T.CloudColor AS Nodes_CloudColor, 
            T.FontName AS Nodes_FontName, 
            T.FontSize AS Nodes_FontSize, 
            T.FontWeight AS Nodes_FontWeight, 
            T.FontStyle AS Nodes_FontStyle, 
            T.ReminderAt AS Nodes_ReminderAt, 
            T.Progress AS Nodes_Progress, 
            T.Link AS Nodes_Link, 
            T.LinkTestedAt AS Nodes_LinkTestedAt, 
            T.LinkStatus AS Nodes_LinkStatus, 
            T.MediaStreamId AS Nodes_MediaStreamId, 
            T.MediaType AS Nodes_MediaType, 
            T.MediaOffest AS Nodes_MediaOffest, 
            T.MediaLength AS Nodes_MediaLength, 
            T.MediaCycle AS Nodes_MediaCycle, 
            T.Hook AS Nodes_Hook, 
            T.RestrictAccess AS Nodes_RestrictAccess, 
            T.ForeignId AS Nodes_ForeignId, 
            T.ForeignOrigin AS Nodes_ForeignOrigin, 
            T.CreatedAt AS Nodes_CreatedAt, 
            T.CreatedBy AS Nodes_CreatedBy, 
            T.ModifiedAt AS Nodes_ModifiedAt, 
            T.ModifiedBy AS Nodes_ModifiedBy, 
            True AS _from0
        FROM ForestEntities.Nodes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.Connections.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Connections
        [MindForestModel.Store.Connections](T1.Connections_Id, T1.Connections_FromId, T1.Connections_ToId, T1.Connections_Position, T1.Connections_IsVisible, T1.Connections_AlwaysExpand, T1.Connections_CssClass, T1.Connections_Style, T1.Connections_Color, T1.Connections_Width, T1.Connections_Hook, T1.Connections_CreatedAt, T1.Connections_CreatedBy, T1.Connections_ModifiedAt, T1.Connections_ModifiedBy, T1.Connections_ForeignId, T1.Connections_ForeignOrigin, T1.Connections_Relation)
    FROM (
        SELECT 
            T.Id AS Connections_Id, 
            T.FromId AS Connections_FromId, 
            T.ToId AS Connections_ToId, 
            T.Position AS Connections_Position, 
            T.IsVisible AS Connections_IsVisible, 
            T.AlwaysExpand AS Connections_AlwaysExpand, 
            T.CssClass AS Connections_CssClass, 
            T.Style AS Connections_Style, 
            T.Color AS Connections_Color, 
            T.Width AS Connections_Width, 
            T.Hook AS Connections_Hook, 
            T.CreatedAt AS Connections_CreatedAt, 
            T.CreatedBy AS Connections_CreatedBy, 
            T.ModifiedAt AS Connections_ModifiedAt, 
            T.ModifiedBy AS Connections_ModifiedBy, 
            T.ForeignId AS Connections_ForeignId, 
            T.ForeignOrigin AS Connections_ForeignOrigin, 
            T.Relation AS Connections_Relation, 
            True AS _from0
        FROM ForestEntities.Connections AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.Permissions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Permissions
        [MindForestModel.Store.Permissions](T1.Permissions_NodeId, T1.Permissions_RoleId, T1.Permissions_Permission)
    FROM (
        SELECT 
            T.NodeId AS Permissions_NodeId, 
            T.RoleId AS Permissions_RoleId, 
            T.PermissionType AS Permissions_Permission, 
            True AS _from0
        FROM ForestEntities.Permissions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.NodeTexts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NodeTexts
        [MindForestModel.Store.NodeTexts](T1.NodeTexts_Id, T1.NodeTexts_NodeId, T1.NodeTexts_Lang, T1.NodeTexts_Position, T1.NodeTexts_Title, T1.NodeTexts_RichTitle, T1.NodeTexts_Synopsis, T1.NodeTexts_Description, T1.NodeTexts_Comment)
    FROM (
        SELECT 
            T.Id AS NodeTexts_Id, 
            T.NodeId AS NodeTexts_NodeId, 
            T.Lang AS NodeTexts_Lang, 
            T.Position AS NodeTexts_Position, 
            T.Title AS NodeTexts_Title, 
            T.RichTitle AS NodeTexts_RichTitle, 
            T.Synopsis AS NodeTexts_Synopsis, 
            T.Description AS NodeTexts_Description, 
            T.Comment AS NodeTexts_Comment, 
            True AS _from0
        FROM ForestEntities.NodeTexts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.ConnectionTexts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConnectionTexts
        [MindForestModel.Store.ConnectionTexts](T1.ConnectionTexts_Id, T1.ConnectionTexts_ConnectionId, T1.ConnectionTexts_Lang, T1.ConnectionTexts_StartText, T1.ConnectionTexts_LineText, T1.ConnectionTexts_EndText, T1.ConnectionTexts_Description, T1.ConnectionTexts_Comment)
    FROM (
        SELECT 
            T.Id AS ConnectionTexts_Id, 
            T.ConnectionId AS ConnectionTexts_ConnectionId, 
            T.Lang AS ConnectionTexts_Lang, 
            T.StartText AS ConnectionTexts_StartText, 
            T.LineText AS ConnectionTexts_LineText, 
            T.EndText AS ConnectionTexts_EndText, 
            T.Description AS ConnectionTexts_Description, 
            T.Comment AS ConnectionTexts_Comment, 
            True AS _from0
        FROM ForestEntities.ConnectionTexts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.UserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaims
        [MindForestModel.Store.UserClaims](T1.UserClaims_Id, T1.UserClaims_UserId, T1.UserClaims_ClaimType, T1.UserClaims_ClaimValue, T1.[UserClaims.IdentityUser_Id])
    FROM (
        SELECT 
            T.Id AS UserClaims_Id, 
            T.UserId AS UserClaims_UserId, 
            T.ClaimType AS UserClaims_ClaimType, 
            T.ClaimValue AS UserClaims_ClaimValue, 
            T.IdentityUser_Id AS [UserClaims.IdentityUser_Id], 
            True AS _from0
        FROM ForestEntities.UserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.UserExternalLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserExternalLogins
        [MindForestModel.Store.UserExternalLogins](T1.UserExternalLogins_LoginProvider, T1.UserExternalLogins_ProviderKey, T1.UserExternalLogins_UserId, T1.[UserExternalLogins.IdentityUser_Id])
    FROM (
        SELECT 
            T.LoginProvider AS UserExternalLogins_LoginProvider, 
            T.ProviderKey AS UserExternalLogins_ProviderKey, 
            T.UserId AS UserExternalLogins_UserId, 
            T.IdentityUser_Id AS [UserExternalLogins.IdentityUser_Id], 
            True AS _from0
        FROM ForestEntities.UserExternalLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.UserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRoles
        [MindForestModel.Store.UserRoles](T1.UserRoles_UserId, T1.UserRoles_RoleId, T1.[UserRoles.IdentityUser_Id])
    FROM (
        SELECT 
            T.UserId AS UserRoles_UserId, 
            T.RoleId AS UserRoles_RoleId, 
            T.IdentityUser_Id AS [UserRoles.IdentityUser_Id], 
            True AS _from0
        FROM ForestEntities.UserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MindForestModel.Store.Users](T1.Users_Id, T1.Users_Email, T1.Users_EmailConfirmed, T1.Users_PasswordHash, T1.Users_SecurityStamp, T1.Users_PhoneNumber, T1.Users_PhoneNumberConfirmed, T1.Users_TwoFactorEnabled, T1.Users_LockoutEndDateUtc, T1.Users_LockoutEnabled, T1.Users_AccessFailedCount, T1.Users_UserName, T1.Users_DisplayName, T1.Users_Hometown, T1.Users_Discriminator)
    FROM (
        SELECT 
            T.Id AS Users_Id, 
            T.Email AS Users_Email, 
            T.EmailConfirmed AS Users_EmailConfirmed, 
            T.PasswordHash AS Users_PasswordHash, 
            T.SecurityStamp AS Users_SecurityStamp, 
            T.PhoneNumber AS Users_PhoneNumber, 
            T.PhoneNumberConfirmed AS Users_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS Users_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS Users_LockoutEndDateUtc, 
            T.LockoutEnabled AS Users_LockoutEnabled, 
            T.AccessFailedCount AS Users_AccessFailedCount, 
            T.UserName AS Users_UserName, 
            T.DisplayName AS Users_DisplayName, 
            T.Hometown AS Users_Hometown, 
            T.Discriminator AS Users_Discriminator, 
            True AS _from0
        FROM ForestEntities.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MindForestModelStoreContainer.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [MindForestModel.Store.Roles](T1.Roles_Id, T1.Roles_Name)
    FROM (
        SELECT 
            T.Id AS Roles_Id, 
            T.Name AS Roles_Name, 
            True AS _from0
        FROM ForestEntities.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.Nodes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Nodes
        [MindForest.Models.Node](T1.Node_Id, T1.Node_Lang, T1.Node_UserId, T1.Node_NodeType, T1.Node_IsTreeRoot, T1.Node_Icon, T1.Node_CssClass, T1.Node_Style, T1.Node_Color, T1.Node_BackColor, T1.Node_CloudColor, T1.Node_FontName, T1.Node_FontSize, T1.Node_FontWeight, T1.Node_FontStyle, T1.Node_ReminderAt, T1.Node_Progress, T1.Node_Link, T1.Node_MediaType, T1.Node_MediaOffest, T1.Node_MediaLength, T1.Node_MediaCycle, T1.Node_Hook, T1.Node_ForeignId, T1.Node_ForeignOrigin, T1.Node_CreatedAt, T1.Node_CreatedBy, T1.Node_ModifiedAt, T1.Node_ModifiedBy, T1.Node_MediaStreamId, T1.Node_LinkTestedAt, T1.Node_LinkStatus, T1.Node_TreeSettings, T1.Node_RestrictAccess)
    FROM (
        SELECT 
            T.Id AS Node_Id, 
            T.Lang AS Node_Lang, 
            T.UserId AS Node_UserId, 
            T.NodeType AS Node_NodeType, 
            T.IsTreeRoot AS Node_IsTreeRoot, 
            T.Icon AS Node_Icon, 
            T.CssClass AS Node_CssClass, 
            T.Style AS Node_Style, 
            T.Color AS Node_Color, 
            T.BackColor AS Node_BackColor, 
            T.CloudColor AS Node_CloudColor, 
            T.FontName AS Node_FontName, 
            T.FontSize AS Node_FontSize, 
            T.FontWeight AS Node_FontWeight, 
            T.FontStyle AS Node_FontStyle, 
            T.ReminderAt AS Node_ReminderAt, 
            T.Progress AS Node_Progress, 
            T.Link AS Node_Link, 
            T.MediaType AS Node_MediaType, 
            T.MediaOffest AS Node_MediaOffest, 
            T.MediaLength AS Node_MediaLength, 
            T.MediaCycle AS Node_MediaCycle, 
            T.Hook AS Node_Hook, 
            T.ForeignId AS Node_ForeignId, 
            T.ForeignOrigin AS Node_ForeignOrigin, 
            T.CreatedAt AS Node_CreatedAt, 
            T.CreatedBy AS Node_CreatedBy, 
            T.ModifiedAt AS Node_ModifiedAt, 
            T.ModifiedBy AS Node_ModifiedBy, 
            T.MediaStreamId AS Node_MediaStreamId, 
            T.LinkTestedAt AS Node_LinkTestedAt, 
            T.LinkStatus AS Node_LinkStatus, 
            T.TreeSettings AS Node_TreeSettings, 
            T.RestrictAccess AS Node_RestrictAccess, 
            True AS _from0
        FROM MindForestModelStoreContainer.Nodes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.Connections.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Connections
        [MindForest.Models.Connection](T1.Connection_Id, T1.Connection_CssClass, T1.Connection_FromId, T1.Connection_ToId, T1.Connection_Relation, T1.Connection_Position, T1.Connection_IsVisible, T1.Connection_AlwaysExpand, T1.Connection_Style, T1.Connection_Color, T1.Connection_Width, T1.Connection_Hook, T1.Connection_ForeignId, T1.Connection_ForeignOrigin, T1.Connection_CreatedAt, T1.Connection_CreatedBy, T1.Connection_ModifiedAt, T1.Connection_ModifiedBy)
    FROM (
        SELECT 
            T.Id AS Connection_Id, 
            T.CssClass AS Connection_CssClass, 
            T.FromId AS Connection_FromId, 
            T.ToId AS Connection_ToId, 
            T.Relation AS Connection_Relation, 
            T.Position AS Connection_Position, 
            T.IsVisible AS Connection_IsVisible, 
            T.AlwaysExpand AS Connection_AlwaysExpand, 
            T.Style AS Connection_Style, 
            T.Color AS Connection_Color, 
            T.Width AS Connection_Width, 
            T.Hook AS Connection_Hook, 
            T.ForeignId AS Connection_ForeignId, 
            T.ForeignOrigin AS Connection_ForeignOrigin, 
            T.CreatedAt AS Connection_CreatedAt, 
            T.CreatedBy AS Connection_CreatedBy, 
            T.ModifiedAt AS Connection_ModifiedAt, 
            T.ModifiedBy AS Connection_ModifiedBy, 
            True AS _from0
        FROM MindForestModelStoreContainer.Connections AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.Permissions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Permissions
        [MindForest.Models.Permission](T1.Permission_NodeId, T1.Permission_RoleId, T1.Permission_PermissionType)
    FROM (
        SELECT 
            T.NodeId AS Permission_NodeId, 
            T.RoleId AS Permission_RoleId, 
            T.Permission AS Permission_PermissionType, 
            True AS _from0
        FROM MindForestModelStoreContainer.Permissions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.NodeTexts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NodeTexts
        [MindForest.Models.NodeText](T1.NodeText_Id, T1.NodeText_NodeId, T1.NodeText_Lang, T1.NodeText_Position, T1.NodeText_Title, T1.NodeText_RichTitle, T1.NodeText_Synopsis, T1.NodeText_Description, T1.NodeText_Comment)
    FROM (
        SELECT 
            T.Id AS NodeText_Id, 
            T.NodeId AS NodeText_NodeId, 
            T.Lang AS NodeText_Lang, 
            T.Position AS NodeText_Position, 
            T.Title AS NodeText_Title, 
            T.RichTitle AS NodeText_RichTitle, 
            T.Synopsis AS NodeText_Synopsis, 
            T.Description AS NodeText_Description, 
            T.Comment AS NodeText_Comment, 
            True AS _from0
        FROM MindForestModelStoreContainer.NodeTexts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.ConnectionTexts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConnectionTexts
        [MindForest.Models.ConnectionText](T1.ConnectionText_Id, T1.ConnectionText_ConnectionId, T1.ConnectionText_Lang, T1.ConnectionText_StartText, T1.ConnectionText_LineText, T1.ConnectionText_EndText, T1.ConnectionText_Description, T1.ConnectionText_Comment)
    FROM (
        SELECT 
            T.Id AS ConnectionText_Id, 
            T.ConnectionId AS ConnectionText_ConnectionId, 
            T.Lang AS ConnectionText_Lang, 
            T.StartText AS ConnectionText_StartText, 
            T.LineText AS ConnectionText_LineText, 
            T.EndText AS ConnectionText_EndText, 
            T.Description AS ConnectionText_Description, 
            T.Comment AS ConnectionText_Comment, 
            True AS _from0
        FROM MindForestModelStoreContainer.ConnectionTexts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.UserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaims
        [MindForest.Models.UserClaim](T1.UserClaim_Id, T1.UserClaim_UserId, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue, T1.[UserClaim.IdentityUser_Id])
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.UserId AS UserClaim_UserId, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            T.IdentityUser_Id AS [UserClaim.IdentityUser_Id], 
            True AS _from0
        FROM MindForestModelStoreContainer.UserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.UserExternalLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserExternalLogins
        [MindForest.Models.UserExternalLogin](T1.UserExternalLogin_LoginProvider, T1.UserExternalLogin_ProviderKey, T1.UserExternalLogin_UserId, T1.[UserExternalLogin.IdentityUser_Id])
    FROM (
        SELECT 
            T.LoginProvider AS UserExternalLogin_LoginProvider, 
            T.ProviderKey AS UserExternalLogin_ProviderKey, 
            T.UserId AS UserExternalLogin_UserId, 
            T.IdentityUser_Id AS [UserExternalLogin.IdentityUser_Id], 
            True AS _from0
        FROM MindForestModelStoreContainer.UserExternalLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.UserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRoles
        [MindForest.Models.UserRole](T1.UserRole_UserId, T1.UserRole_RoleId, T1.[UserRole.IdentityUser_Id])
    FROM (
        SELECT 
            T.UserId AS UserRole_UserId, 
            T.RoleId AS UserRole_RoleId, 
            T.IdentityUser_Id AS [UserRole.IdentityUser_Id], 
            True AS _from0
        FROM MindForestModelStoreContainer.UserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MindForest.Models.User](T1.User_Id, T1.User_Email, T1.User_EmailConfirmed, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_PhoneNumber, T1.User_PhoneNumberConfirmed, T1.User_TwoFactorEnabled, T1.User_LockoutEndDateUtc, T1.User_LockoutEnabled, T1.User_AccessFailedCount, T1.User_UserName, T1.User_DisplayName, T1.User_Hometown, T1.User_Discriminator)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Email AS User_Email, 
            T.EmailConfirmed AS User_EmailConfirmed, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.PhoneNumberConfirmed AS User_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS User_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS User_LockoutEndDateUtc, 
            T.LockoutEnabled AS User_LockoutEnabled, 
            T.AccessFailedCount AS User_AccessFailedCount, 
            T.UserName AS User_UserName, 
            T.DisplayName AS User_DisplayName, 
            T.Hometown AS User_Hometown, 
            T.Discriminator AS User_Discriminator, 
            True AS _from0
        FROM MindForestModelStoreContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ForestEntities.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [MindForest.Models.Role](T1.Role_Id, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM MindForestModelStoreContainer.Roles AS T
    ) AS T1");
        }
    }
}
