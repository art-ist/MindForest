//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindForest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Core.Objects.DataClasses;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    
    public partial class ForestEntities : DbContext
    {
        public ForestEntities()
            : base("name=ForestEntities")
        {
    		        this.Configuration.LazyLoadingEnabled = false;
        }
    		public ForestEntities(string ConnectionName)
            : base("name=" + ConnectionName)
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Node> Nodes { get; set; }
        public DbSet<Connection> Connections { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<NodeText> NodeTexts { get; set; }
        public DbSet<ConnectionText> ConnectionTexts { get; set; }
        public DbSet<UserClaim> UserClaims { get; set; }
        public DbSet<UserExternalLogin> UserExternalLogins { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
    
        [EdmFunction("ForestEntities", "GetNeighbourConnections")]
        public virtual IQueryable<Connection> GetNeighbourConnections(Nullable<int> nodeId, string user, Nullable<int> levels, Nullable<int> skipLevels, string lang)
        {
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var levelsParameter = levels.HasValue ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(int));
    
            var skipLevelsParameter = skipLevels.HasValue ?
                new ObjectParameter("SkipLevels", skipLevels) :
                new ObjectParameter("SkipLevels", typeof(int));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Connection>("[ForestEntities].[GetNeighbourConnections](@NodeId, @User, @Levels, @SkipLevels, @Lang)", nodeIdParameter, userParameter, levelsParameter, skipLevelsParameter, langParameter);
        }
    
        [EdmFunction("ForestEntities", "GetChildConnections")]
        public virtual IQueryable<Connection> GetChildConnections(Nullable<int> nodeId, string user, Nullable<int> levels, Nullable<int> skipLevels, string lang)
        {
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var levelsParameter = levels.HasValue ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(int));
    
            var skipLevelsParameter = skipLevels.HasValue ?
                new ObjectParameter("SkipLevels", skipLevels) :
                new ObjectParameter("SkipLevels", typeof(int));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Connection>("[ForestEntities].[GetChildConnections](@NodeId, @User, @Levels, @SkipLevels, @Lang)", nodeIdParameter, userParameter, levelsParameter, skipLevelsParameter, langParameter);
        }
    
        [EdmFunction("ForestEntities", "GetParentConnections")]
        public virtual IQueryable<Connection> GetParentConnections(Nullable<int> nodeId, string user, Nullable<int> levels, Nullable<int> skipLevels, string lang, Nullable<Boolean> includeSiblings)
        {
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var levelsParameter = levels.HasValue ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(int));
    
            var skipLevelsParameter = skipLevels.HasValue ?
                new ObjectParameter("SkipLevels", skipLevels) :
                new ObjectParameter("SkipLevels", typeof(int));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));

			var includeSiblingsParameter = includeSiblings.HasValue ?
				new ObjectParameter("IncludeSiblings", includeSiblings) :
				new ObjectParameter("IncludeSiblings", typeof(Boolean));

			return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Connection>("[ForestEntities].[GetParentConnections](@NodeId, @User, @Levels, @SkipLevels, @Lang, @IncludeSiblings)", nodeIdParameter, userParameter, levelsParameter, skipLevelsParameter, langParameter, includeSiblingsParameter);
        }
    
        [EdmFunction("ForestEntities", "GetNodes")]
        public virtual IQueryable<Node> GetNodes(string user, string lang)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Node>("[ForestEntities].[GetNodes](@User, @Lang)", userParameter, langParameter);
        }
    
        [EdmFunction("ForestEntities", "NodeLookup")]
        public virtual IQueryable<NodeLookupInfo> NodeLookup(Nullable<int> rootNodeId, string user, string lang)
        {
            var rootNodeIdParameter = rootNodeId.HasValue ?
                new ObjectParameter("RootNodeId", rootNodeId) :
                new ObjectParameter("RootNodeId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<NodeLookupInfo>("[ForestEntities].[NodeLookup](@RootNodeId, @User, @Lang)", rootNodeIdParameter, userParameter, langParameter);
        }
    }
}
